import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from database import Database
from nlp_processor import NLPProcessor
from recipe_manager import RecipeManager

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class KitchenBot:
    def __init__(self):
        self.db = Database()
        self.nlp = NLPProcessor()
        self.recipe_manager = RecipeManager(self.db)
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = """
üç≥ **–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –∫—É—Ö–æ–Ω–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫!**

–Ø —Ä–æ–∑—É–º—ñ—é –∑–≤–∏—á–∞–π–Ω—É –º–æ–≤—É, —Ç–æ–º—É –º–æ–∂–µ—à –ø–∏—Å–∞—Ç–∏ –º–µ–Ω—ñ —è–∫ –¥—Ä—É–≥—É:

üîç **–†–µ—Ü–µ–ø—Ç–∏:**
‚Ä¢ "–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –±–æ—Ä—â—É"
‚Ä¢ "–±–æ—Ä—â –Ω–∞ 6 –ø–æ—Ä—Ü—ñ–π"
‚Ä¢ "—â–æ –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏ –∑ –∫—É—Ä–∫–∏?"
‚Ä¢ "–≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç"

üõí **–ü—Ä–æ–¥—É–∫—Ç–∏:**
‚Ä¢ "–º–æ—ó –∑–∞–ø–∞—Å–∏"
‚Ä¢ "–¥–æ–¥–∞–π –º–æ–ª–æ–∫–æ 2 –ª—ñ—Ç—Ä–∏"
‚Ä¢ "—â–æ —î –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É?"

üîÑ **–ó–∞–º—ñ–Ω–∏:**
‚Ä¢ "—á–∏–º –∑–∞–º—ñ–Ω–∏—Ç–∏ –º–æ–ª–æ–∫–æ?"
‚Ä¢ "–Ω–µ–º–∞—î —Ü—É–∫—Ä—É, —â–æ —Ä–æ–±–∏—Ç–∏?"

üìä **–•–∞—Ä—á—É–≤–∞–Ω–Ω—è:**
‚Ä¢ "–∫–∞–ª–æ—Ä—ñ—ó –±–æ—Ä—â—É"
‚Ä¢ "–ø–æ–∂–∏–≤–Ω—ñ—Å—Ç—å –º'—è—Å–∞"

üí° **–ü–æ—Ä–∞–¥–∏:**
‚Ä¢ "–ø–æ—Ä–∞–¥–∏ –¥–ª—è –±–æ—Ä—â—É"
‚Ä¢ "—è–∫ –∫—Ä–∞—â–µ –≥–æ—Ç—É–≤–∞—Ç–∏?"

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–µ–Ω—ñ –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é! üòä
        """
        
        # –ö–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
        keyboard = [
            [InlineKeyboardButton("üç≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç", callback_data="random_recipe")],
            [InlineKeyboardButton("üõí –ú–æ—ó –∑–∞–ø–∞—Å–∏", callback_data="my_inventory")],
            [InlineKeyboardButton("üìö –í—Å—ñ —Ä–µ—Ü–µ–ø—Ç–∏", callback_data="all_recipes")],
            [InlineKeyboardButton("üí° –©–æ –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏?", callback_data="cooking_suggestions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        user_message = update.message.text
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ NLP
        processed = self.nlp.process_message(user_message)
        intent = processed['intent']
        params = processed['parameters']
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —â–æ –∑—Ä–æ–∑—É–º—ñ–ª–∏
        response_template = self.nlp.generate_response_template(intent, params)
        await update.message.reply_text(response_template)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞ —Ç–∏–ø–æ–º –∑–∞–ø–∏—Ç—É
        if intent == 'recipe':
            await self.handle_recipe_request(update, params)
        elif intent == 'substitution':
            await self.handle_substitution_request(update, params)
        elif intent == 'nutrition':
            await self.handle_nutrition_request(update, params)
        elif intent == 'inventory':
            await self.handle_inventory_request(update)
        elif intent == 'meal_plan':
            await self.handle_meal_plan_request(update)
        else:
            await self.handle_unknown_request(update, user_message)
    
    async def handle_recipe_request(self, update: Update, params: dict):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ —Ä–µ—Ü–µ–ø—Ç—ñ–≤"""
        dish = params.get('dish')
        servings = params.get('servings')
        category = params.get('category')
        difficulty = params.get('difficulty')
        
        if dish:
            # –®—É–∫–∞—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Å—Ç—Ä–∞–≤—É
            recipe = self.recipe_manager.get_recipe_by_name(dish, servings)
            if recipe:
                message = self.recipe_manager.format_recipe_message(recipe)
                
                # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –¥—ñ–π
                keyboard = [
                    [InlineKeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏", callback_data=f"check_ingredients_{recipe['id']}")],
                    [InlineKeyboardButton("üí° –ü–æ—Ä–∞–¥–∏", callback_data=f"cooking_tips_{recipe['id']}")],
                    [InlineKeyboardButton("üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫", callback_data=f"shopping_list_{recipe['id']}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ —Å—Ö–æ–∂—ñ —Ä–µ—Ü–µ–ø—Ç–∏
                similar_recipes = self.recipe_manager.find_recipes(dish)
                if similar_recipes:
                    message = self.recipe_manager.format_recipe_list(similar_recipes, f"–°—Ö–æ–∂—ñ —Ä–µ—Ü–µ–ø—Ç–∏ –Ω–∞ '{dish}'")
                    await update.message.reply_text(message, parse_mode='Markdown')
                else:
                    await update.message.reply_text(f"‚ùå –†–µ—Ü–µ–ø—Ç '{dish}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏:")
                    await self.send_recipe_suggestions(update)
        else:
            # –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
            recipe = self.recipe_manager.get_random_recipe(category, difficulty)
            if recipe:
                message = "üé≤ **–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Ç–µ–±–µ:**\n\n"
                message += self.recipe_manager.format_recipe_message(recipe)
                await update.message.reply_text(message, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –ù–µ –∑–Ω–∞–π—à–æ–≤ –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ—Ü–µ–ø—Ç—ñ–≤")
    
    async def handle_substitution_request(self, update: Update, params: dict):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞–º—ñ–Ω"""
        ingredient = params.get('ingredient')
        
        if ingredient:
            substitutions = self.db.get_substitutions(ingredient)
            if substitutions:
                message = f"üîÑ **–ß–∏–º –º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ {ingredient}:**\n\n"
                for i, (substitute, ratio, notes) in enumerate(substitutions, 1):
                    message += f"{i}. **{substitute}**"
                    if ratio != 1.0:
                        message += f" (–∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç {ratio})"
                    message += "\n"
                    if notes:
                        message += f"   üí° {notes}\n"
                    message += "\n"
            else:
                message = f"‚ùå –ù–µ –∑–Ω–∞–π—à–æ–≤ –∑–∞–º—ñ–Ω –¥–ª—è '{ingredient}'\n\n"
                message += "üí° –°–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç–∏ —ñ–Ω–∞–∫—à–µ –∞–±–æ –∑–∞–ø–∏—Ç–∞–π –ø—Ä–æ —ñ–Ω—à–∏–π —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç"
        else:
            message = "‚ùì –ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ —è–∫–∏–π —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–º—ñ–Ω–∏—Ç–∏. –°–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç–∏: '—á–∏–º –∑–∞–º—ñ–Ω–∏—Ç–∏ –º–æ–ª–æ–∫–æ?'"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def handle_nutrition_request(self, update: Update, params: dict):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ —Ö–∞—Ä—á–æ–≤–æ—ó —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ"""
        item = params.get('item')
        
        if item:
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä—á–æ–≤–æ—ó —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ
            message = f"üìä **–•–∞—Ä—á–æ–≤–∞ —Ü—ñ–Ω–Ω—ñ—Å—Ç—å {item} (–Ω–∞ 100–≥):**\n\n"
            message += "‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –°–∫–æ—Ä–æ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞!"
        else:
            message = "‚ùì –ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –¥–ª—è —è–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É –ø–æ–∫–∞–∑–∞—Ç–∏ —Ö–∞—Ä—á–æ–≤—É —Ü—ñ–Ω–Ω—ñ—Å—Ç—å"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def handle_inventory_request(self, update: Update):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞–ø–∞—Å—ñ–≤"""
        products = self.db.get_products()
        
        if products:
            message = "üõí **–¢–≤–æ—ó –∑–∞–ø–∞—Å–∏:**\n\n"
            
            # –ì—Ä—É–ø—É—î–º–æ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
            categories = {}
            for product in products:
                category = product[5] or '—ñ–Ω—à–µ'
                if category not in categories:
                    categories[category] = []
                categories[category].append(product)
            
            # –ï–º–æ–¥–∑—ñ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
            category_emoji = {
                '–º\'—è—Å–æ': 'ü•©',
                '–æ–≤–æ—á—ñ': 'ü•ï',
                '—Ñ—Ä—É–∫—Ç–∏': 'üçé',
                '–º–æ–ª–æ—á–Ω—ñ': 'ü•õ',
                '–∫—Ä—É–ø–∏': 'üåæ',
                '—ñ–Ω—à–µ': 'üì¶'
            }
            
            for category, items in categories.items():
                emoji = category_emoji.get(category, 'üì¶')
                message += f"{emoji} **{category.title()}:**\n"
                
                for product in items:
                    name, quantity, unit = product[1], product[2], product[3]
                    if quantity > 0:
                        message += f"‚Ä¢ {name} - {quantity} {unit}\n"
                    else:
                        message += f"‚Ä¢ {name} - ‚ùå –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—å\n"
                message += "\n"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")],
                [InlineKeyboardButton("üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_inventory")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
        else:
            message = "üì¶ **–¢–≤–æ—ó –∑–∞–ø–∞—Å–∏ –ø–æ—Ä–æ–∂–Ω—ñ**\n\n–î–æ–¥–∞–π –ø—Ä–æ–¥—É–∫—Ç–∏ –∫–æ–º–∞–Ω–¥–æ—é: '–¥–æ–¥–∞–π –º–æ–ª–æ–∫–æ 2 –ª—ñ—Ç—Ä–∏'"
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—à–∏–π –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_meal_plan_request(self, update: Update):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è"""
        message = "üìÖ **–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è**\n\n"
        message += "‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –°–∫–æ—Ä–æ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n"
        message += "–ü–æ–∫–∏ —â–æ –º–æ–∂–µ—à:\n"
        message += "‚Ä¢ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç\n"
        message += "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ —Ä–µ—Ü–µ–ø—Ç–∏\n"
        message += "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—ó –∑–∞–ø–∞—Å–∏"
        
        keyboard = [
            [InlineKeyboardButton("üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç", callback_data="random_recipe")],
            [InlineKeyboardButton("üìö –í—Å—ñ —Ä–µ—Ü–µ–ø—Ç–∏", callback_data="all_recipes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_unknown_request(self, update: Update, user_message: str):
        """–û–±—Ä–æ–±–∫–∞ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤"""
        suggestions = self.nlp.get_suggestions(user_message)
        
        message = "ü§î **–ù–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–≤ —â–æ —Ç–∏ —Ö–æ—á–µ—à**\n\n"
        message += "–ú–æ–∂–ª–∏–≤–æ, —Ç–∏ –º–∞–≤ –Ω–∞ —É–≤–∞–∑—ñ:\n"
        
        keyboard = []
        for suggestion in suggestions:
            keyboard.append([InlineKeyboardButton(f"üí° {suggestion}", callback_data=f"suggest_{suggestion}")])
        
        keyboard.append([InlineKeyboardButton("‚ùì –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏", callback_data="show_examples")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "random_recipe":
            recipe = self.recipe_manager.get_random_recipe()
            if recipe:
                message = "üé≤ **–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç:**\n\n"
                message += self.recipe_manager.format_recipe_message(recipe)
                await query.edit_message_text(message, parse_mode='Markdown')
        
        elif data == "my_inventory":
            await self.handle_inventory_request_callback(query)
        
        elif data == "all_recipes":
            recipes = self.recipe_manager.find_recipes("")
            message = self.recipe_manager.format_recipe_list(recipes, "–í—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏")
            await query.edit_message_text(message, parse_mode='Markdown')
        
        elif data == "cooking_suggestions":
            await self.send_cooking_suggestions(query)
        
        elif data.startswith("check_ingredients_"):
            recipe_id = int(data.split("_")[2])
            recipe = self.db.get_recipe_by_id(recipe_id)
            if recipe:
                recipe_dict = {
                    'id': recipe[0], 'name': recipe[1], 'description': recipe[2],
                    'instructions': recipe[3], 'prep_time': recipe[4], 'cook_time': recipe[5],
                    'servings': recipe[6], 'difficulty': recipe[7], 'category': recipe[8]
                }
                ingredients = self.db.get_recipe_ingredients(recipe_id)
                recipe_dict['ingredients'] = [
                    {'name': ing[0], 'quantity': ing[1], 'unit': ing[2]} 
                    for ing in ingredients
                ]
                message = self.recipe_manager.format_ingredient_check(recipe_dict)
                await query.edit_message_text(message, parse_mode='Markdown')
        
        elif data.startswith("cooking_tips_"):
            recipe_id = int(data.split("_")[2])
            recipe = self.db.get_recipe_by_id(recipe_id)
            if recipe:
                recipe_dict = {
                    'name': recipe[1], 'difficulty': recipe[7], 'category': recipe[8],
                    'prep_time': recipe[4], 'cook_time': recipe[5]
                }
                message = self.recipe_manager.get_cooking_tips(recipe_dict)
                await query.edit_message_text(message, parse_mode='Markdown')
        
        elif data == "show_examples":
            await self.send_examples(query)
        
        elif data.startswith("suggest_"):
            suggestion = data[8:]  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ "suggest_"
            # –û–±—Ä–æ–±–ª—è—î–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —è–∫ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            processed = self.nlp.process_message(suggestion)
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –æ–±—Ä–æ–±–∫–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
            await query.edit_message_text(f"–û–±—Ä–æ–±–ª—è—é: {suggestion}")
    
    async def handle_inventory_request_callback(self, query):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –∑–∞–ø–∞—Å—ñ–≤ —á–µ—Ä–µ–∑ callback"""
        products = self.db.get_products()
        
        if products:
            message = "üõí **–¢–≤–æ—ó –∑–∞–ø–∞—Å–∏:**\n\n"
            for product in products[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
                name, quantity, unit = product[1], product[2], product[3]
                if quantity > 0:
                    message += f"‚Ä¢ {name} - {quantity} {unit}\n"
                else:
                    message += f"‚Ä¢ {name} - ‚ùå –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—å\n"
            
            if len(products) > 10:
                message += f"\n... —Ç–∞ —â–µ {len(products) - 10} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤"
        else:
            message = "üì¶ –¢–≤–æ—ó –∑–∞–ø–∞—Å–∏ –ø–æ—Ä–æ–∂–Ω—ñ"
        
        await query.edit_message_text(message, parse_mode='Markdown')
    
    async def send_recipe_suggestions(self, update: Update):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ä–µ—Ü–µ–ø—Ç—ñ–≤"""
        keyboard = [
            [InlineKeyboardButton("üç≤ –ë–æ—Ä—â", callback_data="suggest_—Ä–µ—Ü–µ–ø—Ç –±–æ—Ä—â—É")],
            [InlineKeyboardButton("ü•ü –í–∞—Ä–µ–Ω–∏–∫–∏", callback_data="suggest_—Ä–µ—Ü–µ–ø—Ç –≤–∞—Ä–µ–Ω–∏–∫—ñ–≤")],
            [InlineKeyboardButton("ü•ó –°–∞–ª–∞—Ç", callback_data="suggest_—Ä–µ—Ü–µ–ø—Ç —Å–∞–ª–∞—Ç—É")],
            [InlineKeyboardButton("üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π", callback_data="random_recipe")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üí° **–ü–æ–ø—É–ª—è—Ä–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏:**", 
            reply_markup=reply_markup, 
            parse_mode='Markdown'
        )
    
    async def send_cooking_suggestions(self, query):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏"""
        message = "üç≥ **–©–æ –º–æ–∂–Ω–∞ –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏:**\n\n"
        message += "üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç - —Å—é—Ä–ø—Ä–∏–∑ –¥–ª—è —Ç–µ–±–µ\n"
        message += "üç≤ –ü–µ—Ä—à—ñ —Å—Ç—Ä–∞–≤–∏ - —Å—É–ø–∏, –±–æ—Ä—â—ñ\n"
        message += "üçñ –û—Å–Ω–æ–≤–Ω—ñ —Å—Ç—Ä–∞–≤–∏ - –º'—è—Å–æ, –≥–∞—Ä–Ω—ñ—Ä–∏\n"
        message += "ü•ó –°–∞–ª–∞—Ç–∏ - –ª–µ–≥–∫—ñ —Ç–∞ —Å–≤—ñ–∂—ñ\n"
        message += "üç∞ –î–µ—Å–µ—Ä—Ç–∏ - —Å–æ–ª–æ–¥–æ—â—ñ\n\n"
        message += "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —â–æ —Ö–æ—á–µ—à!"
        
        await query.edit_message_text(message, parse_mode='Markdown')
    
    async def send_examples(self, query):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–º–∞–Ω–¥"""
        message = """
üí° **–ü—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–º–∞–Ω–¥:**

üîç **–†–µ—Ü–µ–ø—Ç–∏:**
‚Ä¢ "—Ä–µ—Ü–µ–ø—Ç –±–æ—Ä—â—É"
‚Ä¢ "–±–æ—Ä—â –Ω–∞ 8 –ø–æ—Ä—Ü—ñ–π"
‚Ä¢ "—â–æ –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏ –∑ –∫—É—Ä–∫–∏"
‚Ä¢ "–≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç"

üõí **–ü—Ä–æ–¥—É–∫—Ç–∏:**
‚Ä¢ "–º–æ—ó –∑–∞–ø–∞—Å–∏"
‚Ä¢ "—â–æ —î –≤–¥–æ–º–∞"
‚Ä¢ "–¥–æ–¥–∞–π –º–æ–ª–æ–∫–æ 2 –ª—ñ—Ç—Ä–∏"

üîÑ **–ó–∞–º—ñ–Ω–∏:**
‚Ä¢ "—á–∏–º –∑–∞–º—ñ–Ω–∏—Ç–∏ –º–æ–ª–æ–∫–æ"
‚Ä¢ "–Ω–µ–º–∞—î —Ü—É–∫—Ä—É"

üìä **–•–∞—Ä—á—É–≤–∞–Ω–Ω—è:**
‚Ä¢ "–∫–∞–ª–æ—Ä—ñ—ó –±–æ—Ä—â—É"
‚Ä¢ "–ø–æ–∂–∏–≤–Ω—ñ—Å—Ç—å –º'—è—Å–∞"

–ü–∏—à–∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é! üòä
        """
        
        await query.edit_message_text(message, parse_mode='Markdown')
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
        
        if update and update.message:
            await update.message.reply_text(
                "üòÖ –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à–∏ /start"
            )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    TOKEN = os.getenv('BOT_TOKEN')
    if not TOKEN:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ BOT_TOKEN –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞
    bot = KitchenBot()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    application.add_handler(CallbackQueryHandler(bot.handle_callback))
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    print("ü§ñ –ö—É—Ö–æ–Ω–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
