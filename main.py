main_code = '''import os
import json
import logging
import re
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
import gspread
from google.oauth2.service_account import Credentials

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—ñ –º–æ–¥—É–ª—ñ
from database import KitchenDatabase
from kitchen_core import (
    add_product, remove_product, list_products, find_product,
    get_expiring_products, add_to_shopping_list, get_shopping_list,
    remove_from_shopping_list, get_consumption_stats
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHATLLM_API_KEY = os.getenv('CHATLLM_API_KEY')
CHATLLM_API_URL = "https://routellm.abacus.ai/v1/chat/completions"

class KitchenBot:
    def __init__(self):
        self.db = KitchenDatabase()
    
    def call_chatllm_api(self, prompt, system_message=""):
        """–í–∏–∫–ª–∏–∫ ChatLLM API"""
        headers = {
            'Authorization': f'Bearer {CHATLLM_API_KEY}',
            'Content-Type': 'application/json'
        }
        
        messages = []
        if system_message:
            messages.append({"role": "system", "content": system_message})
        messages.append({"role": "user", "content": prompt})
        
        data = {
            "model": "gpt-4o-mini",
            "messages": messages,
            "temperature": 0.3
        }
        
        try:
            response = requests.post(CHATLLM_API_URL, headers=headers, json=data)
            response.raise_for_status()
            return response.json()['choices'][0]['message']['content']
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ ChatLLM API: {e}")
            return None
    
    def parse_user_intent(self, message_text, user_id):
        """–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –Ω–∞–º—ñ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ ChatLLM"""
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        products = list_products(user_id)
        products_context = ", ".join([p["product_name"] for p in products[:10]])  # –ø–µ—Ä—à—ñ 10
        
        system_prompt = f"""
        –¢–∏ - –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –Ω–∞–º—ñ—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–æ–¥–æ –∫—É—Ö–æ–Ω–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤.
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç: —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î —Ç–∞–∫—ñ –ø—Ä–æ–¥—É–∫—Ç–∏: {products_context}
        
        –í–∏–∑–Ω–∞—á –Ω–∞–º—ñ—Ä —ñ –ø–æ–≤–µ—Ä–Ω–∏ JSON:
        
        1. –î–û–î–ê–¢–ò –ø—Ä–æ–¥—É–∫—Ç:
        {{"action": "add", "product_name": "–Ω–∞–∑–≤–∞", "quantity": —á–∏—Å–ª–æ, "unit": "–æ–¥–∏–Ω–∏—Ü—è", "confidence": 0.9}}
        
        2. –í–Ü–î–ù–Ø–¢–ò/–ó'–á–°–¢–ò –ø—Ä–æ–¥—É–∫—Ç:
        {{"action": "remove", "product_name": "–Ω–∞–∑–≤–∞", "quantity": —á–∏—Å–ª–æ, "unit": "–æ–¥–∏–Ω–∏—Ü—è", "confidence": 0.9}}
        
        3. –ó–ê–ü–ò–¢–ê–¢–ò –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å:
        {{"action": "query", "product_name": "–Ω–∞–∑–≤–∞", "confidence": 0.9}}
        
        4. –î–û–î–ê–¢–ò –¥–æ —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫:
        {{"action": "shopping_add", "product_name": "–Ω–∞–∑–≤–∞", "quantity": —á–∏—Å–ª–æ, "unit": "–æ–¥–∏–Ω–∏—Ü—è", "confidence": 0.9}}
        
        5. –ó–ê–ì–ê–õ–¨–ù–ê –†–û–ó–ú–û–í–ê:
        {{"action": "chat", "confidence": 0.5}}

        –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:
        - –î–æ–¥–∞—Ç–∏: "–∫—É–ø–∏–≤", "–¥–æ–¥–∞–≤", "–ø–æ–∫–ª–∞–≤", "–ø—Ä–∏–≤—ñ–∑", "–æ—Ç—Ä–∏–º–∞–≤"
        - –í—ñ–¥–Ω—è—Ç–∏: "–∑'—ó–≤", "–∑—ó–≤", "–≤–∏—Ç—Ä–∞—Ç–∏–≤", "–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤", "–ø—Ä–∏–≥–æ—Ç—É–≤–∞–≤", "–≤—ñ–¥–Ω—è—Ç–∏"
        - –ó–∞–ø–∏—Ç–∞—Ç–∏: "—Å–∫—ñ–ª—å–∫–∏", "—á–∏ —î", "—â–æ —É –º–µ–Ω–µ", "–º–∞—é", "–∑–∞–ª–∏—à–∏–ª–æ—Å—å"
        - –ü–æ–∫—É–ø–∫–∏: "—Ç—Ä–µ–±–∞ –∫—É–ø–∏—Ç–∏", "–¥–æ–¥–∞–π –¥–æ —Å–ø–∏—Å–∫—É", "–Ω–∞–≥–∞–¥–∞–π –∫—É–ø–∏—Ç–∏"
        
        –ü—Ä–∏–∫–ª–∞–¥–∏:
        "–∫—É–ø–∏–≤ 1–ª –º–æ–ª–æ–∫–∞" ‚Üí {{"action": "add", "product_name": "–º–æ–ª–æ–∫–æ", "quantity": 1, "unit": "–ª", "confidence": 0.9}}
        "–∑'—ó–≤ 250–≥ —Å–∏—Ä–Ω–∏–∫—ñ–≤" ‚Üí {{"action": "remove", "product_name": "—Å–∏—Ä–Ω–∏–∫–∏", "quantity": 250, "unit": "–≥", "confidence": 0.9}}
        "—Å–∫—ñ–ª—å–∫–∏ —É –º–µ–Ω–µ –∫–∞—Ä—Ç–æ–ø–ª—ñ?" ‚Üí {{"action": "query", "product_name": "–∫–∞—Ä—Ç–æ–ø–ª—è", "confidence": 0.9}}
        "—Ç—Ä–µ–±–∞ –∫—É–ø–∏—Ç–∏ —Ö–ª—ñ–±" ‚Üí {{"action": "shopping_add", "product_name": "—Ö–ª—ñ–±", "quantity": 1, "unit": "—à—Ç", "confidence": 0.8}}
        """
        
        response = self.call_chatllm_api(message_text, system_prompt)
        if response:
            try:
                return json.loads(response)
            except json.JSONDecodeError:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON: {response}")
        return {"action": "chat", "confidence": 0.0}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
kitchen_bot = KitchenBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_message = """
üç≥ –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π —Ä–æ–∑—É–º–Ω–∏–π –∫—É—Ö–æ–Ω–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç!

ü§ñ –©–æ —è —Ä–æ–∑—É–º—ñ—é:
‚Ä¢ "–∫—É–ø–∏–≤ 1–ª –º–æ–ª–æ–∫–∞" ‚Üí –¥–æ–¥–∞–º –¥–æ –∫—É—Ö–Ω—ñ
‚Ä¢ "–∑'—ó–≤ 250–≥ —Å–∏—Ä–Ω–∏–∫—ñ–≤" ‚Üí –≤—ñ–¥–Ω—ñ–º—É –∑ –∫—É—Ö–Ω—ñ  
‚Ä¢ "—Å–∫—ñ–ª—å–∫–∏ —É –º–µ–Ω–µ –∫–∞—Ä—Ç–æ–ø–ª—ñ?" ‚Üí –ø–æ–∫–∞–∂—É –Ω–∞—è–≤–Ω—ñ—Å—Ç—å
‚Ä¢ "—Ç—Ä–µ–±–∞ –∫—É–ø–∏—Ç–∏ —Ö–ª—ñ–±" ‚Üí –¥–æ–¥–∞–º –¥–æ —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫

üìã –ö–æ–º–∞–Ω–¥–∏:
‚Ä¢ /products - –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
‚Ä¢ /expiring - —â–æ —Å–∫–æ—Ä–æ –ø—Å—É—î—Ç—å—Å—è
‚Ä¢ /shopping - —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è
‚Ä¢ /remove 250 –≥ —Å–∏—Ä–Ω–∏–∫—ñ–≤ - —Ç–æ—á–Ω–µ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è

üéØ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é!
    """
    await update.message.reply_text(welcome_message)

# –†–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É
REMOVE_RX = re.compile(r"^/remove\\s+(?P<qty>[\\d.,]+)\\s*(?P<unit>–≥|–≥—Ä|–∫–≥|–º–ª|–ª|—à—Ç)\\s+(?P<name>.+)$", re.IGNORECASE)
QUICK_REMOVE_RX = re.compile(r"(?P<qty>[\\d.,]+)\\s*(?P<unit>–≥|–≥—Ä|–∫–≥|–º–ª|–ª|—à—Ç)\\s+(?P<name>.+?)(?:\\s|$)", re.IGNORECASE)

async def cmd_remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /remove –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è"""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    m = REMOVE_RX.match(text)
    if not m:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /remove 250 –≥ —Å–∏—Ä–Ω–∏–∫—ñ–≤")
        return
    
    qty = float(m.group("qty").replace(",", "."))
    unit = m.group("unit")
    name = m.group("name").strip()
    
    result = remove_product(user_id, name, qty, unit)
    await update.message.reply_text(result)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–æ–ª–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # –®–≤–∏–¥–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è
    low = message_text.lower()
    if any(kw in low for kw in ["–∑'—ó–≤", "–∑—ó–≤", "–≤—ñ–¥–Ω—ñ–º–∏", "–≤—ñ–¥–Ω—è—Ç–∏", "–º—ñ–Ω—É—Å", "–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤", "–≤–∏—Ç—Ä–∞—Ç–∏–≤"]):
        m = QUICK_REMOVE_RX.search(low)
        if m:
            qty = float(m.group("qty").replace(",", "."))
            unit = m.group("unit")
            name = m.group("name").strip()
            result = remove_product(user_id, name, qty, unit)
            await update.message.reply_text(result)
            return
    
    # AI —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –Ω–∞–º—ñ—Ä—É
    await update.message.reply_text("ü§î –ê–Ω–∞–ª—ñ–∑—É—é —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    intent = kitchen_bot.parse_user_intent(message_text, user_id)
    
    if intent["action"] == "add":
        result = add_product(
            user_id, 
            intent["product_name"], 
            intent["quantity"], 
            intent["unit"]
        )
        await update.message.reply_text(result)
        
    elif intent["action"] == "remove":
        result = remove_product(
            user_id, 
            intent["product_name"], 
            intent["quantity"], 
            intent["unit"]
        )
        await update.message.reply_text(result)
        
    elif intent["action"] == "query":
        found_products = find_product(user_id, intent["product_name"])
        if found_products:
            response = f"üîç –ó–Ω–∞–π—à–æ–≤ {intent['product_name']}:\\n\\n"
            for product in found_products:
                response += f"‚Ä¢ {product['quantity']}{product['unit']} {product['product_name']}\\n"
        else:
            response = f"‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î {intent['product_name']}"
        await update.message.reply_text(response)
        
    elif intent["action"] == "shopping_add":
        result = add_to_shopping_list(
            user_id,
            intent["product_name"],
            intent.get("quantity", 1),
            intent.get("unit", "—à—Ç")
        )
        await update.message.reply_text(result)
        
    else:
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Ä–æ–∑–º–æ–≤–∞
        system_prompt = """
        –¢–∏ - –¥—Ä—É–∂–Ω—ñ–π –∫—É—Ö–æ–Ω–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —ñ –∫–æ—Ä–∏—Å–Ω–æ.
        –ü—Ä–æ–ø–æ–Ω—É–π –¥–æ–ø–æ–º–æ–≥—É –∑ –∫—É—Ö–æ–Ω–Ω–∏–º–∏ —Å–ø—Ä–∞–≤–∞–º–∏. –ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
        """
        ai_response = kitchen_bot.call_chatllm_api(message_text, system_prompt)
        response = ai_response if ai_response else "–í–∏–±–∞—á, –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤. –°–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏!"
        await update.message.reply_text(response)

async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /products"""
    user_id = update.effective_user.id
    products = list_products(user_id)
    
    if not products:
        await update.message.reply_text("üì¶ –¢–≤–æ—è –∫—É—Ö–Ω—è –ø–æ—Ä–æ–∂–Ω—è! –î–æ–¥–∞–π –ø—Ä–æ–¥—É–∫—Ç–∏.")
        return
    
    # –ì—Ä—É–ø—É—î–º–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    categories = {"–ó–≤–∏—á–∞–π–Ω—ñ": [], "–ú–æ—Ä–æ–∑–∏–ª–∫–∞": [], "–ì–æ—Ç–æ–≤–∞ —ó–∂–∞": []}
    
    for product in products:
        name = product["product_name"]
        if "[–ú–û–†–û–ó–ò–õ–ö–ê]" in name:
            categories["–ú–æ—Ä–æ–∑–∏–ª–∫–∞"].append(product)
        elif "[–ì–û–¢–û–í–ê_–á–ñ–ê]" in name or "[–ú–û–†–û–ó–ò–õ–ö–ê_–ì–û–¢–û–í–ê]" in name:
            categories["–ì–æ—Ç–æ–≤–∞ —ó–∂–∞"].append(product)
        else:
            categories["–ó–≤–∏—á–∞–π–Ω—ñ"].append(product)
    
    response = "üì¶ –¢–≤–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏:\\n\\n"
    for cat_name, items in categories.items():
        if items:
            response += f"**{cat_name}:**\\n"
            for product in items:
                clean_name = product["product_name"].replace("[–ú–û–†–û–ó–ò–õ–ö–ê]", "").replace("[–ì–û–¢–û–í–ê_–á–ñ–ê]", "").replace("[–ú–û–†–û–ó–ò–õ–ö–ê_–ì–û–¢–û–í–ê]", "").strip()
                expiry_info = f" (–¥–æ {product['expiry_date']})" if product.get('expiry_date') else ""
                response += f"‚Ä¢ {product['quantity']}{product['unit']} {clean_name}{expiry_info}\\n"
            response += "\\n"
    
    await update.message.reply_text(response)

async def show_expiring(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /expiring"""
    user_id = update.effective_user.id
    expiring = get_expiring_products(user_id, days=3)
    
    if not expiring:
        await update.message.reply_text("‚úÖ –ù–µ–º–∞—î –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —â–æ —Å–∫–æ—Ä–æ –ø—Å—É—é—Ç—å—Å—è!")
        return
    
    response = "‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç–∏, —â–æ —Å–∫–æ—Ä–æ –ø—Å—É—é—Ç—å—Å—è:\\n\\n"
    for product in expiring:
        days_left = product["days_left"]
        if days_left < 0:
            status = "‚ùå –ü–†–û–°–¢–†–û–ß–ï–ù–û"
        elif days_left == 0:
            status = "üî• –°–¨–û–ì–û–î–ù–Ü"
        elif days_left == 1:
            status = "‚ö° –ó–ê–í–¢–†–ê"
        else:
            status = f"üìÖ {days_left} –¥–Ω—ñ–≤"
        
        clean_name = product["product_name"].replace("[–ú–û–†–û–ó–ò–õ–ö–ê]", "").replace("[–ì–û–¢–û–í–ê_–á–ñ–ê]", "").strip()
        response += f"‚Ä¢ {product['quantity']}{product['unit']} {clean_name} - {status}\\n"
    
    await update.message.reply_text(response)

async def show_shopping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /shopping"""
    user_id = update.effective_user.id
    shopping = get_shopping_list(user_id)
    
    if not shopping:
        await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!")
        return
    
    response = "üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\\n\\n"
    for item in shopping:
        response += f"‚Ä¢ {item['quantity']}{item['unit']} {item['item']}\\n"
    
    await update.message.reply_text(response)

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats"""
    user_id = update.effective_user.id
    stats = get_consumption_stats(user_id, days=7)
    
    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å:\\n\\n"
    
    if stats["consumed"]:
        response += "üçΩÔ∏è **–°–ø–æ–∂–∏—Ç–æ:**\\n"
        for item in stats["consumed"][:5]:  # —Ç–æ–ø 5
            response += f"‚Ä¢ {item['quantity']}–≥/–º–ª {item['product']}\\n"
        response += "\\n"
    
    if stats["added"]:
        response += "üì¶ **–î–æ–¥–∞–Ω–æ:**\\n"
        for item in stats["added"][:5]:  # —Ç–æ–ø 5
            response += f"‚Ä¢ {item['quantity']}–≥/–º–ª {item['product']}\\n"
    
    if not stats["consumed"] and not stats["added"]:
        response += "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ü§∑‚Äç‚ôÇÔ∏è"
    
    await update.message.reply_text(response)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return
    
    if not CHATLLM_API_KEY:
        logger.error("CHATLLM_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return
    
    if not os.getenv('GOOGLE_CREDENTIALS'):
        logger.error("GOOGLE_CREDENTIALS –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("products", show_products))
    application.add_handler(CommandHandler("expiring", show_expiring))
    application.add_handler(CommandHandler("shopping", show_shopping))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("remove", cmd_remove))
    
    # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–º–∞—î –±—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ—é)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("ü§ñ –†–æ–∑—É–º–Ω–∏–π –∫—É—Ö–æ–Ω–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –ø–æ–≤–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
'''

# –ó–∞–ø–∏—Å—É—î–º–æ —Ñ–∞–π–ª–∏
with open('database.py', 'w', encoding='utf-8') as f:
    f.write(database_code)

with open('kitchen_core.py', 'w', encoding='utf-8') as f:
    f.write(kitchen_core_code)

with open('main.py', 'w', encoding='utf-8') as f:
    f.write(main_code)

print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ 3 —Ñ–∞–π–ª–∏:")
print("üìÅ database.py - —Ä–æ–±–æ—Ç–∞ –∑ Google Sheets")
print("üìÅ kitchen_core.py - –æ—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∫—É—Ö–Ω—ñ") 
print("üìÅ main.py - Telegram –±–æ—Ç")
print("\nüöÄ –ì–æ—Ç–æ–≤–æ –¥–æ –¥–µ–ø–ª–æ—é!")
