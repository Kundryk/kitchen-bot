import os
import json
import sqlite3
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHATLLM_API_KEY = os.getenv('CHATLLM_API_KEY')  # –î–æ–¥–∞–π —Ü–µ –≤ Railway
CHATLLM_API_URL = "https://routellm.abacus.ai/v1/chat/completions"  # URL –¥–ª—è RouteLLM

class KitchenBot:
    def __init__(self):
        self.init_database()
    
    def init_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        conn = sqlite3.connect('kitchen.db')
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                quantity REAL NOT NULL,
                unit TEXT NOT NULL,
                expiry_date DATE,
                added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                user_id INTEGER NOT NULL
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS recipes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                ingredients TEXT NOT NULL,  -- JSON
                instructions TEXT NOT NULL,
                servings INTEGER DEFAULT 1,
                user_id INTEGER NOT NULL,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü—è –≤–ø–æ–¥–æ–±–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_preferences (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                liked_recipes TEXT,  -- JSON —Å–ø–∏—Å–æ–∫ ID —Ä–µ—Ü–µ–ø—Ç—ñ–≤
                disliked_ingredients TEXT,  -- JSON —Å–ø–∏—Å–æ–∫ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤
                dietary_restrictions TEXT  -- JSON
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def call_chatllm_api(self, prompt, system_message=""):
        """–í–∏–∫–ª–∏–∫ ChatLLM API"""
        headers = {
            'Authorization': f'Bearer {CHATLLM_API_KEY}',
            'Content-Type': 'application/json'
        }
        
        messages = []
        if system_message:
            messages.append({"role": "system", "content": system_message})
        messages.append({"role": "user", "content": prompt})
        
        data = {
            "model": "gpt-4o-mini",  # –ê–±–æ —ñ–Ω—à–∞ –º–æ–¥–µ–ª—å –∑ RouteLLM
            "messages": messages,
            "temperature": 0.3
        }
        
        try:
            response = requests.post(CHATLLM_API_URL, headers=headers, json=data)
            response.raise_for_status()
            return response.json()['choices'][0]['message']['content']
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ ChatLLM API: {e}")
            return None
    
    def parse_product_message(self, message_text):
        """–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —á–µ—Ä–µ–∑ ChatLLM"""
        system_prompt = """
        –¢–∏ - –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è - –≤–∏—Ç—è–≥—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏ —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —ó—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON.
        
        –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
        {
            "products": [
                {
                    "name": "–Ω–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É",
                    "quantity": —á–∏—Å–ª–æ,
                    "unit": "–æ–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É (–∫–≥, –ª, —à—Ç, –≥, –º–ª)",
                    "expiry_days": –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω—É (—è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ, —ñ–Ω–∞–∫—à–µ null)
                }
            ]
        }
        
        –ü—Ä–∏–∫–ª–∞–¥–∏:
        "–∫—É–ø–∏–≤ 1 –ª –º–æ–ª–æ–∫–∞" -> {"products": [{"name": "–º–æ–ª–æ–∫–æ", "quantity": 1, "unit": "–ª", "expiry_days": 5}]}
        "–≤–∑—è–≤ 200–≥ –º–∞—Å–ª–∞ —ñ 6 —è—î—Ü—å" -> {"products": [{"name": "–º–∞—Å–ª–æ", "quantity": 200, "unit": "–≥", "expiry_days": 30}, {"name": "—è–π—Ü—è", "quantity": 6, "unit": "—à—Ç", "expiry_days": 21}]}
        
        –Ø–∫—â–æ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –Ω–µ–º–∞—î –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, –ø–æ–≤–µ—Ä–Ω–∏: {"products": []}
        """
        
        response = self.call_chatllm_api(message_text, system_prompt)
        if response:
            try:
                return json.loads(response)
            except json.JSONDecodeError:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON: {response}")
        return {"products": []}
    
    def add_products_to_db(self, products_data, user_id):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        conn = sqlite3.connect('kitchen.db')
        cursor = conn.cursor()
        
        added_products = []
        for product in products_data.get('products', []):
            expiry_date = None
            if product.get('expiry_days'):
                expiry_date = (datetime.now() + timedelta(days=product['expiry_days'])).date()
            
            cursor.execute('''
                INSERT INTO products (name, quantity, unit, expiry_date, user_id)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                product['name'],
                product['quantity'],
                product['unit'],
                expiry_date,
                user_id
            ))
            added_products.append(f"{product['quantity']} {product['unit']} {product['name']}")
        
        conn.commit()
        conn.close()
        return added_products
    
    def get_user_products(self, user_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        conn = sqlite3.connect('kitchen.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT name, quantity, unit, expiry_date
            FROM products
            WHERE user_id = ?
            ORDER BY expiry_date ASC
        ''', (user_id,))
        
        products = cursor.fetchall()
        conn.close()
        return products

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
kitchen_bot = KitchenBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_message = """
üç≥ –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –∫—É—Ö–æ–Ω–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç!

–©–æ —è –≤–º—ñ—é:
üì¶ –î–æ–¥–∞–≤–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏: "–∫—É–ø–∏–≤ 1–ª –º–æ–ª–æ–∫–∞", "–≤–∑—è–≤ 200–≥ –º–∞—Å–ª–∞"
üìã –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç–≤–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏: /products
üçΩÔ∏è –ü—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–∏: /recipes
üìä –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —â–æ –º–æ–∂–Ω–∞ –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏: /suggest

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏, —è–∫—ñ —Ç–∏ –∫—É–ø–∏–≤ –∞–±–æ –º–∞—î—à!
    """
    await update.message.reply_text(welcome_message)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # –ü–æ–∫–∞–∑—É—î–º–æ, —â–æ –±–æ—Ç "–¥—É–º–∞—î"
    await update.message.reply_text("ü§î –ê–Ω–∞–ª—ñ–∑—É—é —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    
    # –†–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏ —á–µ—Ä–µ–∑ ChatLLM
    products_data = kitchen_bot.parse_product_message(message_text)
    
    if products_data.get('products'):
        # –î–æ–¥–∞—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏ –¥–æ –±–∞–∑–∏
        added_products = kitchen_bot.add_products_to_db(products_data, user_id)
        
        if added_products:
            response = f"‚úÖ –î–æ–¥–∞–≤ –¥–æ —Ç–≤–æ—î—ó –∫—É—Ö–Ω—ñ:\n" + "\n".join([f"‚Ä¢ {product}" for product in added_products])
        else:
            response = "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
    else:
        # –Ø–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ —á–µ—Ä–µ–∑ ChatLLM
        system_prompt = """
        –¢–∏ - –¥—Ä—É–∂–Ω—ñ–π –∫—É—Ö–æ–Ω–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–ª–µ –≤ –Ω—å–æ–º—É –Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏.
        –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —ñ –¥—Ä—É–∂–Ω—å–æ, –ø—Ä–æ–ø–æ–Ω—É–π –¥–æ–ø–æ–º–æ–≥—É –∑ –∫—É—Ö–æ–Ω–Ω–∏–º–∏ —Å–ø—Ä–∞–≤–∞–º–∏.
        –ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
        """
        
        ai_response = kitchen_bot.call_chatllm_api(message_text, system_prompt)
        response = ai_response if ai_response else "–í–∏–±–∞—á, –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤. –°–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏, —è–∫—ñ —Ç–∏ –∫—É–ø–∏–≤ –∞–±–æ –º–∞—î—à."
    
    await update.message.reply_text(response)

async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /products - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = update.effective_user.id
    products = kitchen_bot.get_user_products(user_id)
    
    if not products:
        await update.message.reply_text("üì¶ –¢–≤–æ—è –∫—É—Ö–Ω—è –ø–æ—Ä–æ–∂–Ω—è! –î–æ–¥–∞–π –ø—Ä–æ–¥—É–∫—Ç–∏, –Ω–∞–ø–∏—Å–∞–≤—à–∏ –ø—Ä–æ –Ω–∏—Ö.")
        return
    
    response = "üì¶ –¢–≤–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏:\n\n"
    for name, quantity, unit, expiry_date in products:
        expiry_info = ""
        if expiry_date:
            expiry_date_obj = datetime.strptime(expiry_date, '%Y-%m-%d').date()
            days_left = (expiry_date_obj - datetime.now().date()).days
            if days_left < 0:
                expiry_info = " ‚ö†Ô∏è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ"
            elif days_left <= 3:
                expiry_info = f" ‚ö†Ô∏è –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ {days_left} –¥–Ω."
            else:
                expiry_info = f" (–¥–æ {expiry_date})"
        
        response += f"‚Ä¢ {quantity} {unit} {name}{expiry_info}\n"
    
    await update.message.reply_text(response)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return
    
    if not CHATLLM_API_KEY:
        logger.error("CHATLLM_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("products", show_products))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
