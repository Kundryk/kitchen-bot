import os
import json
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
import gspread
from google.oauth2.service_account import Credentials

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—ñ –º–æ–¥—É–ª—ñ
from database import KitchenDatabase
from kitchen_core import add_product, remove_product, list_products

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHATLLM_API_KEY = os.getenv('CHATLLM_API_KEY')
CHATLLM_API_URL = "https://routellm.abacus.ai/v1/chat/completions"

class KitchenBot:
    def __init__(self):
        self.init_gsheets()
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–≤—É –±–∞–∑—É –¥–∞–Ω–∏—Ö
        self.db = KitchenDatabase()
    
    def init_gsheets(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets (—Å—Ç–∞—Ä–∏–π –∫–æ–¥ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)"""
        try:
            logger.info("üîÑ –ü–æ—á–∏–Ω–∞—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é Google Sheets...")
            
            creds_env = os.environ.get("GOOGLE_CREDENTIALS")
            if not creds_env:
                logger.error("‚ùå –ó–º—ñ–Ω–Ω–∞ GOOGLE_CREDENTIALS –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ Railway!")
                self.products_sheet = None
                return
            
            logger.info("‚úÖ GOOGLE_CREDENTIALS –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            service_account_info = json.loads(creds_env)
            logger.info(f"‚úÖ JSON —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ. Project ID: {service_account_info.get('project_id')}")
            
            creds = Credentials.from_service_account_info(
                service_account_info,
                scopes=[
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/drive"
                ]
            )
            logger.info("‚úÖ –ö—Ä–µ–¥–µ–Ω—à—ñ–∞–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            
            client = gspread.authorize(creds)
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –≤ gspread –ø—Ä–æ–π—à–ª–∞")
            
            logger.info("üîÑ –ù–∞–º–∞–≥–∞—é—Å—å –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é 'kitchen_products'...")
            self.products_sheet = client.open("kitchen_products").sheet1
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—è 'kitchen_products' –≤—ñ–¥–∫—Ä–∏—Ç–∞ —É—Å–ø—ñ—à–Ω–æ")
            
            if len(self.products_sheet.get_all_values()) == 0:
                logger.info("üîÑ –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è, –¥–æ–¥–∞—é –∑–∞–≥–æ–ª–æ–≤–∫–∏...")
                self.products_sheet.append_row([
                    "user_id", "product_name", "quantity", "unit", "expiry_date", "added_date"
                ])
                logger.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–¥–∞–Ω–æ")
            
            logger.info("üéâ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Google Sheets –ø–æ–≤–Ω—ñ—Å—Ç—é —É—Å–ø—ñ—à–Ω–µ!")
            
        except Exception as e:
            logger.error(f"‚ùå –î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Google Sheets: {e}")
            logger.error(f"‚ùå –¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(e).__name__}")
            self.products_sheet = None
    
    def call_chatllm_api(self, prompt, system_message=""):
        """–í–∏–∫–ª–∏–∫ ChatLLM API"""
        headers = {
            'Authorization': f'Bearer {CHATLLM_API_KEY}',
            'Content-Type': 'application/json'
        }
        
        messages = []
        if system_message:
            messages.append({"role": "system", "content": system_message})
        messages.append({"role": "user", "content": prompt})
        
        data = {
            "model": "gpt-4o-mini",
            "messages": messages,
            "temperature": 0.3
        }
        
        try:
            response = requests.post(CHATLLM_API_URL, headers=headers, json=data)
            response.raise_for_status()
            return response.json()['choices'][0]['message']['content']
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ ChatLLM API: {e}")
            return None
    
    def parse_action_and_product(self, message_text):
        """–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥—ñ—ó (–¥–æ–¥–∞—Ç–∏/–≤—ñ–¥–Ω—è—Ç–∏) —Ç–∞ –ø—Ä–æ–¥—É–∫—Ç—É —á–µ—Ä–µ–∑ ChatLLM"""
        system_prompt = """
        –¢–∏ - –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥—ñ–π –∑ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è.
        –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è - –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —â–æ —Ö–æ—á–µ –∑—Ä–æ–±–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: –¥–æ–¥–∞—Ç–∏ —á–∏ –≤—ñ–¥–Ω—è—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç.
        
        –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (JSON):
        {
            "action": "add" –∞–±–æ "remove",
            "product_name": "–Ω–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É",
            "quantity": —á–∏—Å–ª–æ,
            "unit": "–æ–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É (–∫–≥, –ª, —à—Ç, –≥, –º–ª)",
            "confidence": 0.9
        }

        –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è "remove" (–≤—ñ–¥–Ω—è—Ç–∏):
        - –∑'—ó–≤, –∑—ó–≤, –∑'—ó–ª–∞, –∑—ó–ª–∞
        - –≤–∏—Ç—Ä–∞—Ç–∏–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤
        - –ø—Ä–∏–≥–æ—Ç—É–≤–∞–≤ –∑ —Ü—å–æ–≥–æ
        - –≤—ñ–¥–Ω—è—Ç–∏, –º—ñ–Ω—É—Å

        –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è "add" (–¥–æ–¥–∞—Ç–∏):
        - –∫—É–ø–∏–≤, –¥–æ–¥–∞–≤, –ø–æ–∫–ª–∞–≤
        - –ø—Ä–∏–≤—ñ–∑, –æ—Ç—Ä–∏–º–∞–≤
        - –ø–ª—é—Å, –¥–æ–¥–∞—Ç–∏

        –ü—Ä–∏–∫–ª–∞–¥–∏:
        "—è –∑'—ó–≤ 250 –≥—Ä–∞–º —Å–∏—Ä–Ω–∏–∫—ñ–≤" -> {"action": "remove", "product_name": "—Å–∏—Ä–Ω–∏–∫–∏", "quantity": 250, "unit": "–≥", "confidence": 0.9}
        "–∫—É–ø–∏–≤ 1 –ª—ñ—Ç—Ä –º–æ–ª–æ–∫–∞" -> {"action": "add", "product_name": "–º–æ–ª–æ–∫–æ", "quantity": 1, "unit": "–ª", "confidence": 0.9}
        
        –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ—à –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –¥—ñ—é, –ø–æ–≤–µ—Ä–Ω–∏: {"action": "unknown", "confidence": 0.0}
        """
        
        response = self.call_chatllm_api(message_text, system_prompt)
        if response:
            try:
                return json.loads(response)
            except json.JSONDecodeError:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON: {response}")
        return {"action": "unknown", "confidence": 0.0}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
kitchen_bot = KitchenBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_message = """
üç≥ –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π —Ä–æ–∑—É–º–Ω–∏–π –∫—É—Ö–æ–Ω–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç!

–©–æ —è –≤–º—ñ—é:
üì¶ –†–æ–∑—É–º—ñ—é —Ç–≤–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:
   ‚Ä¢ "–∫—É–ø–∏–≤ 1–ª –º–æ–ª–æ–∫–∞" ‚Üí –¥–æ–¥–∞–º –¥–æ —Å–ø–∏—Å–∫—É
   ‚Ä¢ "–∑'—ó–≤ 250–≥ —Å–∏—Ä–Ω–∏–∫—ñ–≤" ‚Üí –≤—ñ–¥–Ω—ñ–º—É –∑—ñ —Å–ø–∏—Å–∫—É
   ‚Ä¢ "—â–æ —É –º–µ–Ω–µ —î?" ‚Üí –ø–æ–∫–∞–∂—É –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏

üìã –ö–æ–º–∞–Ω–¥–∏:
   ‚Ä¢ /products - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
   ‚Ä¢ /test_add - —Ç–µ—Å—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è
   ‚Ä¢ /test_remove - —Ç–µ—Å—Ç –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è

ü§ñ –¢–µ–ø–µ—Ä —è —Ä–æ–∑—É–º—ñ—é, –∫–æ–ª–∏ —Ç–∏ —â–æ—Å—å –¥–æ–¥–∞—î—à, –∞ –∫–æ–ª–∏ –∑'—ó–¥–∞—î—à!
    """
    await update.message.reply_text(welcome_message)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –Ω–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    await update.message.reply_text("ü§î –ê–Ω–∞–ª—ñ–∑—É—é —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥—ñ–π
    action_data = kitchen_bot.parse_action_and_product(message_text)
    
    if action_data["action"] == "add":
        result = add_product(
            user_id, 
            action_data["product_name"], 
            action_data["quantity"], 
            action_data["unit"]
        )
        await update.message.reply_text(result)
        
    elif action_data["action"] == "remove":
        result = remove_product(
            user_id, 
            action_data["product_name"], 
            action_data["quantity"], 
            action_data["unit"]
        )
        await update.message.reply_text(result)
        
    else:
        # –Ø–∫—â–æ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–∏ –¥—ñ—é - –∑–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        system_prompt = """
        –¢–∏ - –¥—Ä—É–∂–Ω—ñ–π –∫—É—Ö–æ–Ω–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–ª–µ —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤, —â–æ –≤—ñ–Ω —Ö–æ—á–µ –∑—Ä–æ–±–∏—Ç–∏.
        –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —ñ –¥—Ä—É–∂–Ω—å–æ, –ø—Ä–æ–ø–æ–Ω—É–π –¥–æ–ø–æ–º–æ–≥—É –∑ –∫—É—Ö–æ–Ω–Ω–∏–º–∏ —Å–ø—Ä–∞–≤–∞–º–∏.
        –ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
        """
        
        ai_response = kitchen_bot.call_chatllm_api(message_text, system_prompt)
        response = ai_response if ai_response else "–í–∏–±–∞—á, –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤. –°–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç–∏ '–∫—É–ø–∏–≤ –º–æ–ª–æ–∫–æ' –∞–±–æ '–∑'—ó–≤ —Ö–ª—ñ–±'."
        await update.message.reply_text(response)

async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /products - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó"""
    user_id = update.effective_user.id
    products = list_products(user_id)
    
    if not products:
        await update.message.reply_text("üì¶ –¢–≤–æ—è –∫—É—Ö–Ω—è –ø–æ—Ä–æ–∂–Ω—è! –î–æ–¥–∞–π –ø—Ä–æ–¥—É–∫—Ç–∏, –Ω–∞–ø–∏—Å–∞–≤—à–∏ –ø—Ä–æ –Ω–∏—Ö.")
        return
    
    response = "üì¶ –¢–≤–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏:\n\n"
    for product in products:
        expiry_info = ""
        if product.get('expiry_date'):
            expiry_info = f" (–¥–æ {product['expiry_date']})"
        
        response += f"‚Ä¢ {product['quantity']}{product['unit']} {product['product_name']}{expiry_info}\n"
    
    await update.message.reply_text(response)

async def test_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è"""
    user_id = update.effective_user.id
    result = add_product(user_id, "—Ç–µ—Å—Ç–æ–≤–∏–π –ø—Ä–æ–¥—É–∫—Ç", 100, "–≥")
    await update.message.reply_text(f"üß™ –¢–µ—Å—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è:\n{result}")

async def test_remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è"""
    user_id = update.effective_user.id
    result = remove_product(user_id, "—Ç–µ—Å—Ç–æ–≤–∏–π –ø—Ä–æ–¥—É–∫—Ç", 50, "–≥")
    await update.message.reply_text(f"üß™ –¢–µ—Å—Ç –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è:\n{result}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return
    
    if not CHATLLM_API_KEY:
        logger.error("CHATLLM_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return
    
    if not os.getenv('GOOGLE_CREDENTIALS'):
        logger.error("GOOGLE_CREDENTIALS –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("products", show_products))
    application.add_handler(CommandHandler("test_add", test_add))
    application.add_handler(CommandHandler("test_remove", test_remove))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("ü§ñ –†–æ–∑—É–º–Ω–∏–π –∫—É—Ö–æ–Ω–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –Ω–æ–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
