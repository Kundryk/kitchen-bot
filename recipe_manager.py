from database import Database
from typing import List, Dict, Optional, Tuple
import random

class RecipeManager:
    def __init__(self, db: Database):
        self.db = db
    
    def find_recipes(self, query: str, servings: Optional[int] = None) -> List[Dict]:
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º"""
        recipes = self.db.get_recipes(query)
        
        result = []
        for recipe in recipes:
            recipe_dict = {
                'id': recipe[0],
                'name': recipe[1],
                'description': recipe[2],
                'instructions': recipe[3],
                'prep_time': recipe[4],
                'cook_time': recipe[5],
                'servings': recipe[6],
                'difficulty': recipe[7],
                'category': recipe[8],
                'created_at': recipe[9]
            }
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
            ingredients = self.db.get_recipe_ingredients(recipe[0])
            recipe_dict['ingredients'] = []
            
            for ingredient in ingredients:
                ing_dict = {
                    'name': ingredient[0],
                    'quantity': ingredient[1],
                    'unit': ingredient[2]
                }
                
                # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ—Ä–∞—Ö—É–≤–∞—Ç–∏ –Ω–∞ —ñ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—Ü—ñ–π
                if servings and servings != recipe[6]:
                    multiplier = servings / recipe[6]
                    ing_dict['quantity'] = round(ingredient[1] * multiplier, 2)
                
                recipe_dict['ingredients'].append(ing_dict)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—Ü—ñ–π —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if servings:
                recipe_dict['servings'] = servings
                # –ü–µ—Ä–µ—Ä–∞—Ö—É—î–º–æ —á–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è (–º–æ–∂–µ —Ç—Ä–æ—Ö–∏ –∑–±—ñ–ª—å—à–∏—Ç–∏—Å—å)
                if servings > recipe[6]:
                    multiplier = servings / recipe[6]
                    recipe_dict['cook_time'] = int(recipe[5] * (1 + (multiplier - 1) * 0.3))
            
            result.append(recipe_dict)
        
        return result
    
    def get_recipe_by_name(self, name: str, servings: Optional[int] = None) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º—É—î —Ä–µ—Ü–µ–ø—Ç –∑–∞ –Ω–∞–∑–≤–æ—é"""
        recipes = self.find_recipes(name, servings)
        
        # –®—É–∫–∞—î–º–æ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥
        for recipe in recipes:
            if recipe['name'].lower() == name.lower():
                return recipe
        
        # –Ø–∫—â–æ —Ç–æ—á–Ω–æ–≥–æ –∑–±—ñ–≥—É –Ω–µ–º–∞—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return recipes[0] if recipes else None
    
    def get_random_recipe(self, category: Optional[str] = None, difficulty: Optional[str] = None) -> Optional[Dict]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç"""
        all_recipes = self.db.get_recipes()
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é —Ç–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—é
        filtered_recipes = []
        for recipe in all_recipes:
            if category and recipe[8] != category:
                continue
            if difficulty and recipe[7] != difficulty:
                continue
            filtered_recipes.append(recipe)
        
        if not filtered_recipes:
            return None
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π
        random_recipe = random.choice(filtered_recipes)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Å–ª–æ–≤–Ω–∏–∫
        recipe_dict = {
            'id': random_recipe[0],
            'name': random_recipe[1],
            'description': random_recipe[2],
            'instructions': random_recipe[3],
            'prep_time': random_recipe[4],
            'cook_time': random_recipe[5],
            'servings': random_recipe[6],
            'difficulty': random_recipe[7],
            'category': random_recipe[8],
            'created_at': random_recipe[9]
        }
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
        ingredients = self.db.get_recipe_ingredients(random_recipe[0])
        recipe_dict['ingredients'] = []
        
        for ingredient in ingredients:
            recipe_dict['ingredients'].append({
                'name': ingredient[0],
                'quantity': ingredient[1],
                'unit': ingredient[2]
            })
        
        return recipe_dict
    
    def format_recipe_message(self, recipe: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        if not recipe:
            return "‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        message = f"üçΩÔ∏è **{recipe['name']}**\n\n"
        
        # –û–ø–∏—Å
        if recipe.get('description'):
            message += f"üìù {recipe['description']}\n\n"
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ—Ü–µ–ø—Ç
        info_parts = []
        if recipe.get('servings'):
            info_parts.append(f"üë• {recipe['servings']} –ø–æ—Ä—Ü—ñ–π")
        if recipe.get('prep_time'):
            info_parts.append(f"‚è±Ô∏è –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞: {recipe['prep_time']} —Ö–≤")
        if recipe.get('cook_time'):
            info_parts.append(f"üî• –ì–æ—Ç—É–≤–∞–Ω–Ω—è: {recipe['cook_time']} —Ö–≤")
        if recipe.get('difficulty'):
            difficulty_emoji = {'–ª–µ–≥–∫–æ': 'üü¢', '—Å–µ—Ä–µ–¥–Ω—å–æ': 'üü°', '—Å–∫–ª–∞–¥–Ω–æ': 'üî¥'}
            emoji = difficulty_emoji.get(recipe['difficulty'], '‚ö™')
            info_parts.append(f"{emoji} {recipe['difficulty'].title()}")
        
        if info_parts:
            message += " | ".join(info_parts) + "\n\n"
        
        # –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
        if recipe.get('ingredients'):
            message += "üõí **–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:**\n"
            for ingredient in recipe['ingredients']:
                quantity = ingredient['quantity']
                # –§–æ—Ä–º–∞—Ç—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                if quantity == int(quantity):
                    quantity = int(quantity)
                message += f"‚Ä¢ {ingredient['name']} - {quantity} {ingredient['unit']}\n"
            message += "\n"
        
        # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
        if recipe.get('instructions'):
            message += "üë®‚Äçüç≥ **–ü—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:**\n"
            instructions = recipe['instructions'].strip()
            
            # –Ø–∫—â–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –≤–∂–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ñ
            if any(line.strip().startswith(('1.', '1)', '1 ')) for line in instructions.split('\n')):
                message += instructions
            else:
                # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –∫—Ä–æ–∫–∏
                steps = [step.strip() for step in instructions.split('\n') if step.strip()]
                for i, step in enumerate(steps, 1):
                    message += f"{i}. {step}\n"
        
        return message
    
    def format_recipe_list(self, recipes: List[Dict], title: str = "–ó–Ω–∞–π–¥–µ–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏") -> str:
        """–§–æ—Ä–º–∞—Ç—É—î —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤"""
        if not recipes:
            return "‚ùå –†–µ—Ü–µ–ø—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        
        message = f"üìö **{title}**\n\n"
        
        for i, recipe in enumerate(recipes[:5], 1):  # –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ—Ü–µ–ø—Ç—ñ–≤
            # –ï–º–æ–¥–∑—ñ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
            category_emoji = {
                '–ø–µ—Ä—à—ñ —Å—Ç—Ä–∞–≤–∏': 'üç≤',
                '–æ—Å–Ω–æ–≤–Ω—ñ —Å—Ç—Ä–∞–≤–∏': 'üçñ',
                '—Å–∞–ª–∞—Ç–∏': 'ü•ó',
                '–¥–µ—Å–µ—Ä—Ç–∏': 'üç∞',
                '–Ω–∞–ø–æ—ó': 'ü•§'
            }
            emoji = category_emoji.get(recipe.get('category', ''), 'üçΩÔ∏è')
            
            message += f"{i}. {emoji} **{recipe['name']}**\n"
            
            if recipe.get('description'):
                message += f"   {recipe['description'][:50]}{'...' if len(recipe['description']) > 50 else ''}\n"
            
            # –ö–æ—Ä–æ—Ç–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            info = []
            if recipe.get('servings'):
                info.append(f"{recipe['servings']} –ø–æ—Ä—Ü—ñ–π")
            if recipe.get('cook_time'):
                total_time = recipe.get('prep_time', 0) + recipe['cook_time']
                info.append(f"{total_time} —Ö–≤")
            if recipe.get('difficulty'):
                info.append(recipe['difficulty'])
            
            if info:
                message += f"   üìã {' ‚Ä¢ '.join(info)}\n"
            
            message += "\n"
        
        if len(recipes) > 5:
            message += f"... —Ç–∞ —â–µ {len(recipes) - 5} —Ä–µ—Ü–µ–ø—Ç—ñ–≤\n"
        
        message += "\nüí° –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É —Ä–µ—Ü–µ–ø—Ç—É —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é"
        
        return message
    
    def check_available_ingredients(self, recipe: Dict) -> Dict:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —è–∫—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"""
        if not recipe.get('ingredients'):
            return {'available': [], 'missing': [], 'substitutions': []}
        
        available_products = self.db.get_products()
        product_names = [product[1].lower() for product in available_products]
        
        available = []
        missing = []
        substitutions = []
        
        for ingredient in recipe['ingredients']:
            ingredient_name = ingredient['name'].lower()
            
            if ingredient_name in product_names:
                available.append(ingredient)
            else:
                missing.append(ingredient)
                # –®—É–∫–∞—î–º–æ –∑–∞–º—ñ–Ω–∏
                subs = self.db.get_substitutions(ingredient_name)
                if subs:
                    for sub in subs:
                        substitutions.append({
                            'original': ingredient['name'],
                            'substitute': sub[0],
                            'ratio': sub[1],
                            'notes': sub[2]
                        })
        
        return {
            'available': available,
            'missing': missing,
            'substitutions': substitutions
        }
    
    def format_ingredient_check(self, recipe: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤"""
        check_result = self.check_available_ingredients(recipe)
        
        message = f"üîç **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è "{recipe['name']}"**\n\n"
        
        # –î–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
        if check_result['available']:
            message += "‚úÖ **–Ñ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ:**\n"
            for ingredient in check_result['available']:
                message += f"‚Ä¢ {ingredient['name']} - {ingredient['quantity']} {ingredient['unit']}\n"
            message += "\n"
        
        # –í—ñ–¥—Å—É—Ç–Ω—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
        if check_result['missing']:
            message += "‚ùå **–ü–æ—Ç—Ä—ñ–±–Ω–æ –∫—É–ø–∏—Ç–∏:**\n"
            for ingredient in check_result['missing']:
                message += f"‚Ä¢ {ingredient['name']} - {ingredient['quantity']} {ingredient['unit']}\n"
            message += "\n"
        
        # –ú–æ–∂–ª–∏–≤—ñ –∑–∞–º—ñ–Ω–∏
        if check_result['substitutions']:
            message += "üîÑ **–ú–æ–∂–ª–∏–≤—ñ –∑–∞–º—ñ–Ω–∏:**\n"
            for sub in check_result['substitutions']:
                message += f"‚Ä¢ {sub['original']} ‚Üí {sub['substitute']}"
                if sub['ratio'] != 1.0:
                    message += f" (–∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç {sub['ratio']})"
                if sub['notes']:
                    message += f"\n  üí° {sub['notes']}"
                message += "\n"
            message += "\n"
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        total_ingredients = len(recipe.get('ingredients', []))
        available_count = len(check_result['available'])
        
        if available_count == total_ingredients:
            message += "üéâ **–£—Å—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ —î! –ú–æ–∂–Ω–∞ –≥–æ—Ç—É–≤–∞—Ç–∏!**"
        elif available_count > total_ingredients // 2:
            message += f"üëç **–ë—ñ–ª—å—à—ñ—Å—Ç—å —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ —î ({available_count}/{total_ingredients})**"
        else:
            message += f"üõí **–ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–∫—É–ø–∏—Ç–∏ –±–∞–≥–∞—Ç–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ ({total_ingredients - available_count}/{total_ingredients})**"
        
        return message
    
    def get_cooking_tips(self, recipe: Dict) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä–∞–¥–∏ –¥–ª—è –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è"""
        tips = []
        
        # –ü–æ—Ä–∞–¥–∏ –∑–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—é
        if recipe.get('difficulty') == '—Å–∫–ª–∞–¥–Ω–æ':
            tips.append("‚ö†Ô∏è –°–∫–ª–∞–¥–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç - —á–∏—Ç–∞–π —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —É–≤–∞–∂–Ω–æ")
            tips.append("üìñ –ü—ñ–¥–≥–æ—Ç—É–π –≤—Å—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å")
        
        # –ü–æ—Ä–∞–¥–∏ –∑–∞ —á–∞—Å–æ–º
        total_time = recipe.get('prep_time', 0) + recipe.get('cook_time', 0)
        if total_time > 120:
            tips.append("‚è∞ –î–æ–≤–≥–∏–π –ø—Ä–æ—Ü–µ—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è - –∑–∞–ø–ª–∞–Ω—É–π —á–∞—Å")
        
        # –ü–æ—Ä–∞–¥–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
        category = recipe.get('category', '')
        if '—Å—É–ø' in category or '–ø–µ—Ä—à—ñ —Å—Ç—Ä–∞–≤–∏' in category:
            tips.append("üç≤ –°—É–ø –∫—Ä–∞—â–µ –Ω–∞—Å—Ç–æ—é—î—Ç—å—Å—è - –¥–∞–π –ø–æ—Å—Ç–æ—è—Ç–∏ 10-15 —Ö–≤–∏–ª–∏–Ω")
        elif '—Å–∞–ª–∞—Ç' in category:
            tips.append("ü•ó –ó–∞–ø—Ä–∞–≤–ª—è–π —Å–∞–ª–∞—Ç –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ—é")
        elif '–º\'—è—Å–æ' in recipe.get('name', '').lower():
            tips.append("ü•© –î–∞–π –º'—è—Å—É –≤—ñ–¥–ø–æ—á–∏—Ç–∏ 5 —Ö–≤–∏–ª–∏–Ω –ø—ñ—Å–ª—è –≥–æ—Ç—É–≤–∞–Ω–Ω—è")
        
        # –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏
        tips.extend([
            "üßÇ –ü—Ä–æ–±—É–π –Ω–∞ —Å—ñ–ª—å –ø—ñ–¥ —á–∞—Å –≥–æ—Ç—É–≤–∞–Ω–Ω—è",
            "üî• –ù–µ –∑–∞–ª–∏—à–∞–π –ø–ª–∏—Ç—É –±–µ–∑ –Ω–∞–≥–ª—è–¥—É",
            "üßΩ –ú–∏–π –ø–æ—Å—É–¥ –ø–æ —Ö–æ–¥—É –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è"
        ])
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ 3-4 –ø–æ—Ä–∞–¥–∏
        selected_tips = random.sample(tips, min(4, len(tips)))
        
        message = "üí° **–ü–æ—Ä–∞–¥–∏ –¥–ª—è –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:**\n"
        for tip in selected_tips:
            message += f"{tip}\n"
        
        return message
